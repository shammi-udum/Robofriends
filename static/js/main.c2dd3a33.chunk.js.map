{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","setState","target","value","state","fetch","then","response","json","users","this","filteredRobots","filter","robot","toLowerCase","includes","length","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"kOAceA,EAZF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAC3B,OACC,sBAAKC,UAAU,sDAAf,UACC,qBAAKC,IAAK,SAASC,IAAG,+BAA0BH,EAA1B,cACtB,gCACC,6BAAKF,IACL,4BAAIC,WCcMK,EAnBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACnB,OACE,8BAECA,EAAOC,KAAI,SAACC,EAAMC,GACnB,OACC,cAAC,EAAD,CAEER,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,OAHbS,SCKKC,EAbG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aACjC,OACC,qBAAKV,UAAU,MAAf,SACC,uBACCA,UAAU,mCACTW,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCCAI,EARA,SAACC,GACf,OACC,qBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,SAArE,SACCJ,EAAMK,YCuCMC,G,wDArCb,aAAe,IAAD,8BACb,gBAaDC,eAAiB,SAACC,GACjB,EAAKC,SAAS,CAAEf,YAAac,EAAME,OAAOC,SAb1C,EAAKC,MAAQ,CACZvB,OAAQ,GACVK,YAAa,IAJC,E,qDAQf,WAAqB,IAAD,OACnBmB,MAAM,8CACFC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAK,OAAI,EAAKR,SAAS,CAAEpB,OAAQ4B,S,oBAO1C,WACC,MAAgCC,KAAKN,MAA7BvB,EAAR,EAAQA,OAAQK,EAAhB,EAAgBA,YACVyB,EAAiB9B,EAAO+B,QAAO,SAAAC,GACpC,OAAOA,EAAMvC,KAAKwC,cAAcC,SAAS7B,EAAY4B,kBAEtD,OAAQjC,EAAOmC,OAGf,sBAAKvC,UAAU,KAAf,UACC,oBAAIA,UAAU,KAAd,yBACC,cAAC,EAAD,CAAWU,aAAcuB,KAAKX,iBAC7B,cAAC,EAAD,UACG,cAAC,EAAD,CAAUlB,OAAQ8B,SANvB,6C,GAzBcM,cCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCCdO,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SAKjDX,M","file":"static/js/main.c2dd3a33.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n  return (\n  \t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n  \t <img alt= 'robots' src={`https://robohash.org/${id}?200x200`} />\n  \t <div>\n  \t  <h2>{name}</h2>\n  \t  <p>{email}</p>\n  \t </div>\n  \t</div>\n  );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n\treturn (\n\t  <div>\n\t  {\n\t  \trobots.map((user, i) => {\n\t\t\treturn (\n\t\t\t\t<Card \n\t\t\t\t\tkey={i}\n\t\t\t\t\t id={robots[i].id} \n\t\t\t\t\t name={robots[i].name} \n\t\t\t\t\t email={robots[i].email}\n\t\t\t\t\t />\n\t\t  );\n\t\t})\n\t  }\n      </div>\n\t);\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n\treturn(\n\t\t<div className='pa2'>\n\t\t <input \n\t\t  className='pa3 ba b--green bg-lightest-blue'\n\t\t   type='search' \n\t\t   placeholder='search robots' \n\t\t   onChange={searchChange}\n\t\t/>\n\t\t</div>\n\t);\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n\treturn (\n\t\t<div style={{overflowY: 'scroll', border: '1px solid black', height: '500px'}}>\n\t\t{props.children}\n\t\t</div>\n );\n};\n\nexport default Scroll;","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n  \tsuper()\n  \tthis.state = {\n\t  \trobots: [],\n\t\tsearchfield: '',\n  \t}\n  }\n  \n componentDidMount() {\n \tfetch('https://jsonplaceholder.typicode.com/users')\n \t   .then(response=> response.json())\n \t   .then(users => this.setState({ robots: users}));\n}\n\n  onSearchChange = (event) => {\n  \tthis.setState({ searchfield: event.target.value })\n}\n\n  render() {\n  \tconst { robots, searchfield } = this.state;\n  \tconst filteredRobots = robots.filter(robot =>{\n  \t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase());\n  \t})\n  \treturn !robots.length ?\n    <h1>Loading</h1> :\n  \t(\n  \t<div className='tc'>\n\t  \t<h1 className='f1'>RoboFriends</h1>\n\t  \t <SearchBox searchChange={this.onSearchChange}/>\n\t  \t  <Scroll>\n\t  \t     <CardList robots={filteredRobots}/>  \n\t  \t</Scroll>\n  \t</div>\n   );\n }\t\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons'; \n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}